vue的生命周期=生命周期函数=

beforeCreate	执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务
		数据代理和数据检测都还没创建
created		组件初始化完毕，各种数据可以使用，常用于异步数据获取
		数据检测和数据代理创建了
此时Vue开始解析模板，生成虚拟dom，页面还不能显示解析好的内容
beforeMount	未执行渲染、更新，解析好的dom还未显示在页面
		此时还不能操作所有dom
虚拟dom转为真实dom，并在vm.$el存了一份虚拟dom
mounted		初始化结束，dom已创建，可用于获取访问数据和dom元素
beforeUpdate	更新前，可用于获取更新前各种状态
对比新旧虚拟dom
updated		更新后，所有状态已是最新
beforeDestroy	销毁前，可用于一些定时器或订阅的取消
destroyed	组件已销毁

let vm = new Vue({
	el:,
	data,
	methods,
	beforeCreate(){}
		vue实例完全被创建出来之前，会执行，data和methods中的数据还没初始化，
	created(){}
		data和dethods都已经创建好了
		如果要调用methods中的方法，或者操作data中的数据，最早，只能在created中操作,
	然后，Vue开始编译模板，把Vue中的指令进行执行，最终，在内存中生成一个已编译好的最终模板字符串，
	接着，把这个模板字符串，渲染为内存中的DOM，此时，只是在内存中，渲染好了模板，并没有把模板挂在
	真正的页面中去
	beforeMount(){}
		表示模板已经在内存中编译完成了，但是尚未把模板渲染到页面中
		执行的时候，页面中的元素，还没有真正替换过来，此时页面还是旧的
	将内存中的模板编译到真实的页面中去
	mounted(){}
		已经可以看到页面中的数据了
		如果要通过插件操作页面上的DOM节点，最早在mounted中进行
	执行完mounted，表示实例已经创建好了，此时组件脱离了创建阶段，进行到了运行阶段
	运行中的两个事件
	beforeUpdate(){}
		此时数据被更新了，但是页面上的数据还没有更新，data数据是最新的
	这时根据data中的最新的数据，在内存中重新渲染出一份最新的内存DOM树，最新树被更新后，会重新渲染到
	真实的页面中，完成数据从data（Model层）-> view（视图层）的更新
	updeted(){}
		页面和data数据已经同步了
	beforeDestroy(){}
		当执行此函数时，就已经进入到了销毁阶段，都还处于可用状态
	destroyed(){}
		此时组件中所有数据、方法、指令都销毁了

})













